//
//  TRStack.m
//  TRToolKit
//
//  Created by Pedro Gomes on 20/02/2014.
//  Copyright (c) 2014 Thomson Reuters. All rights reserved.
//

#import "TRStack.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@interface TRStack ()

@property (nonatomic, assign) NSUInteger capacity;
@property (nonatomic, strong) NSMutableArray *objects;

@end

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@implementation TRStack

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (instancetype)initWithCapacity:(NSUInteger)capacity
{
    assert(capacity > 0);
    
    if((self = [super init])) {
        self.capacity = capacity;
        self.objects = [NSMutableArray array];
    }
    return self;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (instancetype)init
{
	if((self = [self initWithCapacity:NSUIntegerMax])) {
        
	}
	return self;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (void)push:(id)object
{
    if(self.objects.count == NSUIntegerMax) {
        [self.objects removeLastObject];
    }
    
	if(object) {
		[self.objects insertObject:object atIndex:0];
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)pop
{
	if([self isEmpty] == NO) {
		id topObject = [self top];
		[self.objects removeObjectAtIndex:0];
		return topObject;
	}
	return nil;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)top
{
    return [self.objects firstObject];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (BOOL)isEmpty
{
	return self.objects.count == 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)count
{
	return self.objects.count;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id [])buffer count:(NSUInteger)len
{
	return [self.objects countByEnumeratingWithState:state objects:buffer count:len];
}

@end
