//
//  TRQueue.m
//  TRToolKit
//
//  Created by Pedro Gomes on 07/03/2014.
//  Copyright (c) 2014 Thomson Reuters. All rights reserved.
//

#import "TRQueue.h"
#import "TRMacros.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@interface TRQueue ()

@property (nonatomic, strong) NSMutableArray *storage;

@end

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
@implementation TRQueue

#pragma mark - Dealloc and Initialization

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (instancetype)init
{
    if((self = [super init])) {
        self.storage = [NSMutableArray array];
    }
    return self;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (instancetype)initWithObject:(id)object
{
    if((self = [self init])) {
        [self enqueue:object];
    }
    return self;
    
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (instancetype)initWithArray:(NSArray *)array
{
    if((self = [self init])) {
        for(id object in array) {
            [self enqueue:object];
        }
    }
    return self;
}

#pragma mark - Public Methods

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (void)enqueue:(id)object
{
    [self.storage addObject:object];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)dequeue
{
    TR_RETURN_NIL_UNLESS([self isEmpty] == NO);
    
    id firstObject = [self.storage firstObject];
    
    [self.storage removeObjectAtIndex:0];
    return firstObject;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)top
{
    return [self.storage firstObject];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (BOOL)isEmpty
{
    return (self.storage.count == 0);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (NSUInteger)size
{
    return self.storage.count;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)firstObject
{
    return [self.storage firstObject];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
- (id)lastObject
{
    return [self.storage lastObject];
}

@end
